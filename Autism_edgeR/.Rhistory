#log normalized and covariates data
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#unclean data
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me$all$eqtls)
#removed zero
cat('Analysis done in: ', me_0$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_0$all$eqtls)
#log normalized data
cat('Analysis done in: ', me_log$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_log$all$eqtls)
#Python standard normalized data
cat('Analysis done in: ', me_stan$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_stan$all$eqtls)
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_log$all$eqtls)
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_stan$all$eqtls)
#unclean data
plot(me)
#zero data
plot(me_0)
#log normlized data
plot(me_log)
plot(me_log_qq)
#standard normalized data
plot(me_stan)
plot(me_stan_qq)
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
library(MatrixEQTL)
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Work Prep");
allele = "allele.csv";
count_expression= "fpkm_expression.csv";
count_expression_edit = "fpkm_expression_no_zero.csv";
count_epression_log_norm = "fpkm_expression_log_norm.csv";
count_epression_standard_norm = "fpkm_expression_standrad_norm.csv";
co_var = "mito_covariates.csv"; #0 = male 1 = female
useModel = modelLINEAR
covariates = character();
covariates_applied = co_var;
output_file_name = tempfile();
pvOutputThreshold = 1e-2;
errorCovariance = numeric();
cisDist = 1e6;
#Genotype
snps = SlicedData$new();
snps$fileDelimiter = ",";
snps$fileOmitCharacters = "NA";
snps$fileSkipRows = 1;
snps$fileSkipColumns = 1;
snps$fileSliceSize = 2000;
snps$LoadFile(allele);
#Expression
gene = SlicedData$new();
gene$fileDelimiter = ",";
gene$fileOmitCharacters = "NA";
gene$fileSkipRows = 1;
gene$fileSkipColumns = 1;
gene$fileSliceSize = 2000;
gene$LoadFile(count_expression);
#covariates
cvrt = SlicedData$new();
cvrt$fileDelimiter = ",";
cvrt$fileOmitCharacters = "NA";
cvrt$fileSkipRows = 1;
cvrt$fileSkipColumns = 1;
if(length(covariates)>0) {
cvrt$LoadFile(covariates);}
#Expression
gene_0 = SlicedData$new();
gene_0$fileDelimiter = ",";
gene_0$fileOmitCharacters = "NA";
gene_0$fileSkipRows = 1;
gene_0$fileSkipColumns = 1;
gene_0$fileSliceSize = 2000;
gene_0$LoadFile(count_expression_edit);
#Expression
gene_log = SlicedData$new();
gene_log$fileDelimiter = ",";
gene_log$fileOmitCharacters = "NA";
gene_log$fileSkipRows = 1;
gene_log$fileSkipColumns = 1;
gene_log$fileSliceSize = 2000;
gene_log$LoadFile("fpkm_expression_log_norm.csv");
#Expression
gene_stan = SlicedData$new();
gene_stan$fileDelimiter = ",";
gene_stan$fileOmitCharacters = "NA";
gene_stan$fileSkipRows = 1;
gene_stan$fileSkipColumns = 1;
gene_stan$fileSliceSize = 2000;
gene_stan$LoadFile("fpkm_expression_standrad_norm.csv");
#covariates
cvrt_applied = SlicedData$new();
cvrt_applied$fileDelimiter = ",";
cvrt_applied$fileOmitCharacters = "NA";
cvrt_applied$fileSkipRows = 1;
cvrt_applied$fileSkipColumns = 1;
if(length(covariates_applied)>0) {
cvrt$LoadFile(covariates_applied);}
#uncleaned data
me = Matrix_eQTL_engine(
snps = snps,
gene = gene,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#remove 0 data
me_0 = Matrix_eQTL_engine(
snps = snps,
gene = gene_0,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized data
me_log = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#qqplot
me_log_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized data
me_stan = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
me_stan_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized and covariates data
me_log_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#unclean data
cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me$all$eqtls)
#removed zero
cat('Analysis done in: ', me_0$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_0$all$eqtls)
#log normalized data
cat('Analysis done in: ', me_log$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_log$all$eqtls)
#Python standard normalized data
cat('Analysis done in: ', me_stan$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_stan$all$eqtls)
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_log$all$eqtls)
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
show(me_stan$all$eqtls)
#unclean data
plot(me)
#zero data
plot(me_0)
#log normlized data
plot(me_log)
plot(me_log_qq)
#standard normalized data
plot(me_stan)
plot(me_stan_qq)
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq,cex=0.5, pch = 19)
#standard normalized data
plot(me_stan)
plot(me_stan_qq, cex=0.5, pch =19)
#standard normalized data
plot(me_stan)
plot(me_stan_qq)
show(me_stan_cv$all$min.pv.snps);
show(me_stan_cv$all$min.pv.gene);
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
show(me_stan_cv$all$min.pv.snps);
show(me_stan_cv$all$min.pv.gene);
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq,cex=0.5, pch = 19)
library(MatrixEQTL)
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Work Prep");
library(MatrixEQTL)
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Projects/projects/Mito Eqtl"
library(MatrixEQTL)
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Work Prep");
library(MatrixEQTL)
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Work Prep");
allele = read.csv ="allele.csv";
count_expression= "count_expression.csv";
count_expression_edit = "count_expression_no_zero.csv";
count_epression_log_norm = "count_expression_log_norm.csv";
count_epression_standard_norm = "count_expression_standard_norm.csv";
co_var = "mito_covariates.csv";
useModel = modelLINEAR
covariates = character();
covariates_applied = co_var;
output_file_name = tempfile();
pvOutputThreshold = 1e-2;
errorCovariance = numeric();
cisDist = 1e6;
#Genotype
snps = SlicedData$new();
snps$fileDelimiter = ",";
snps$fileOmitCharacters = "NA";
snps$fileSkipRows = 1;
snps$fileSkipColumns = 1;
snps$fileSliceSize = 2000;
snps$LoadFile(allele);
#Expression
gene = SlicedData$new();
gene$fileDelimiter = ",";
gene$fileOmitCharacters = "NA";
gene$fileSkipRows = 1;
gene$fileSkipColumns = 1;
gene$fileSliceSize = 2000;
gene$LoadFile(count_expression);
#covariates
cvrt = SlicedData$new();
cvrt$fileDelimiter = ",";
cvrt$fileOmitCharacters = "NA";
cvrt$fileSkipRows = 1;
cvrt$fileSkipColumns = 1;
if(length(covariates)>0) {
cvrt$LoadFile(covariates);}
#Expression
gene_norm = SlicedData$new();
gene_norm$fileDelimiter = ",";
gene_norm$fileOmitCharacters = "NA";
gene_norm$fileSkipRows = 1;
gene_norm$fileSkipColumns = 1;
gene_norm$fileSliceSize = 2000;
gene_norm$LoadFile("count_expression_normalizer.csv");
#Expression
gene_minmax = SlicedData$new();
gene_minmax$fileDelimiter = ",";
gene_minmax$fileOmitCharacters = "NA";
gene_minmax$fileSkipRows = 1;
gene_minmax$fileSkipColumns = 1;
gene_minmax$fileSliceSize = 2000;
gene_minmax$LoadFile("count_expression_minmax_norm.csv");
install.packages('RNOmni')
install.packages('RNOmni')
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("edgeR")
getwd()
setwd("C:/User/khuub/One Drive/OneDrive/Desktop/Projects/projects/Autism_edgeR")
setwd("C:/User/khuub/One Drive/OneDrive/Desktop/Projects/")
setwd("C:/User/khuub/One Drive/OneDrive/Desktop/Projects/")
setwd("C:\Users\khuub\One Drive\OneDrive\Desktop\Projects\projects\Autism_edgeR")
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Projects/projects/Autism_edgeR")
15head = read.table("header_15qdup.txt",sep=",")
head15q = read.table("header_15qdup.txt",sep=",")
head15q = t(head15q)
View(head15q)
View(head15q)
View(head15q)
write.csv(head15q,'15colname.csv')
head16 = read.table("header_16p11.txt", sep=",")
head16 = t(head16)
write.csv(head16, '16colname.csv')
mat = as.matrix(head15q)
View(mat)
groups = as.vector(mat[2])
groups = as.vector(mat[2:,])
groups = as.vector(mat[2:])
mat[2:]
mat[2,]
groups = as.vector(mat[2,])
groups
