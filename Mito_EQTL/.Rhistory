errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized and covariates data
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#analysis
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
y = me_log_cv$all$min.pv.gene;
write.csv(y, 'fpkm_log2_pvalues.csv')
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
x = me_stan_cv$all$min.pv.gene;
write.csv(x, 'fpkm_INT_pvalues.csv')
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
unlink(output_file_name)
getwd()
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data, aes(x=value))+geom_histogram()
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data, aes(x=value))+geom_histogram()
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data)+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=pvalue))+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=data$fpkm_log2_pvalues))+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
plt
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 5, fill="#69b3a2", color="#e9ecef")
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram( fill="#69b3a2", color="#e9ecef")
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(bins = 300, fill="#69b3a2", color="#e9ecef")
plt
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(bins = 100, fill="#69b3a2", color="#e9ecef")
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(bins = 100, fill="#69b3a2", color="#e9ecef")
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 1,bins = 200, fill="#69b3a2", color="#e9ecef")
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 0.05, fill="#69b3a2", color="#e9ecef")
plt
library(ggplot2)
data = read.csv('fpkm_log2_pvalues.csv')
plt = ggplot(data,aes(x=fpkm_log2_pvalues))+geom_histogram(binwidth = 0.01, fill="#69b3a2", color="#e9ecef")
plt
library(MatrixEQTL)
#import library
#set work directory
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Projects/projects/Mito_EQTL");
#setwd("/home/brandon/workspace/projects/Mito_EQTL")
#files in use
allele = read.csv ="allele.csv";
count_epression_log_norm = "count_expression_log2.csv";
count_epression_standard_norm = "count_expression_INT.csv";
co_var = "mito_covariates.csv";
#settings for engine
useModel = modelLINEAR
covariates_applied = numeric();
output_file_name = tempfile();
pvOutputThreshold = 1e-2;
errorCovariance = numeric();
cisDist = 1e6;
#Load data
#Genotype
snps = SlicedData$new();
snps$fileDelimiter = ",";
snps$fileOmitCharacters = "NA";
snps$fileSkipRows = 1;
snps$fileSkipColumns = 1;
snps$fileSliceSize = 2000;
snps$LoadFile(allele);
#Expression - Log Standardized
gene_log = SlicedData$new();
gene_log$fileDelimiter = ",";
gene_log$fileOmitCharacters = "NA";
gene_log$fileSkipRows = 1;
gene_log$fileSkipColumns = 1;
gene_log$fileSliceSize = 2000;
gene_log$LoadFile("count_expression_log2.csv");
#Expression - SK Learn StandardScaler
gene_stan = SlicedData$new();
gene_stan$fileDelimiter = ",";
gene_stan$fileOmitCharacters = "NA";
gene_stan$fileSkipRows = 1;
gene_stan$fileSkipColumns = 1;
gene_stan$fileSliceSize = 2000;
gene_stan$LoadFile("count_expression_INT.csv");
#covariates
cvrt_applied = SlicedData$new();
cvrt_applied$fileDelimiter = ",";
cvrt_applied$fileOmitCharacters = "NA";
cvrt_applied$fileSkipRows = 1;
cvrt_applied$fileSkipColumns = 1;
if(length(covariates_applied)>0) {
cvrt_applied$LoadFile(covariates_applied);}
#Analysis
#log normalized and covariates data
me_log_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized and covariates data
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#analysis
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
y = me_log_cv$all$min.pv.gene;
write.csv(y, 'fpkm_log2_pvalues.csv')
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
x = me_stan_cv$all$min.pv.gene;
write.csv(x, 'fpkm_INT_pvalues.csv')
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
library(MatrixEQTL)
#import library
#set work directory
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Projects/projects/Mito_EQTL");
#setwd("/home/brandon/workspace/projects/Mito_EQTL")
#files in use
allele = read.csv ="allele.csv";
count_epression_log_norm = "count_expression_log2.csv";
count_epression_standard_norm = "count_expression_INT.csv";
co_var = "mito_covariates.csv";
#settings for engine
useModel = modelLINEAR
covariates_applied = numeric();
output_file_name = tempfile();
pvOutputThreshold = 1e-2;
errorCovariance = numeric();
cisDist = 1e6;
#Load data
#Genotype
snps = SlicedData$new();
snps$fileDelimiter = ",";
snps$fileOmitCharacters = "NA";
snps$fileSkipRows = 1;
snps$fileSkipColumns = 1;
snps$fileSliceSize = 2000;
snps$LoadFile(allele);
#Expression - Log Standardized
gene_log = SlicedData$new();
gene_log$fileDelimiter = ",";
gene_log$fileOmitCharacters = "NA";
gene_log$fileSkipRows = 1;
gene_log$fileSkipColumns = 1;
gene_log$fileSliceSize = 2000;
gene_log$LoadFile("count_expression_log2.csv");
#Expression - SK Learn StandardScaler
gene_stan = SlicedData$new();
gene_stan$fileDelimiter = ",";
gene_stan$fileOmitCharacters = "NA";
gene_stan$fileSkipRows = 1;
gene_stan$fileSkipColumns = 1;
gene_stan$fileSliceSize = 2000;
gene_stan$LoadFile("count_expression_INT.csv");
#covariates
cvrt_applied = SlicedData$new();
cvrt_applied$fileDelimiter = ",";
cvrt_applied$fileOmitCharacters = "NA";
cvrt_applied$fileSkipRows = 1;
cvrt_applied$fileSkipColumns = 1;
if(length(covariates_applied)>0) {
cvrt_applied$LoadFile(covariates_applied);}
#Analysis
#log normalized and covariates data
me_log_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized and covariates data
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#analysis
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
y = me_log_cv$all$min.pv.gene;
write.csv(y, 'count_log2_pvalues.csv')
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
x = me_stan_cv$all$min.pv.gene;
write.csv(x, 'count_INT_pvalues.csv')
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
library(MatrixEQTL)
#import library
#set work directory
setwd("C:/Users/khuub/One Drive/OneDrive/Desktop/Projects/projects/Mito_EQTL");
#setwd("/home/brandon/workspace/projects/Mito_EQTL")
#files in use
allele = read.csv ="allele.csv";
count_epression_log_norm = "count_expression_log2.csv";
count_epression_standard_norm = "count_expression_INT.csv";
co_var = "mito_covariates.csv";
#settings for engine
useModel = modelLINEAR
covariates_applied = numeric();
output_file_name = tempfile();
pvOutputThreshold = 1e-2;
errorCovariance = numeric();
cisDist = 1e6;
#Load data
#Genotype
snps = SlicedData$new();
snps$fileDelimiter = ",";
snps$fileOmitCharacters = "NA";
snps$fileSkipRows = 1;
snps$fileSkipColumns = 1;
snps$fileSliceSize = 2000;
snps$LoadFile(allele);
#Expression - Log Standardized
gene_log = SlicedData$new();
gene_log$fileDelimiter = ",";
gene_log$fileOmitCharacters = "NA";
gene_log$fileSkipRows = 1;
gene_log$fileSkipColumns = 1;
gene_log$fileSliceSize = 2000;
gene_log$LoadFile("fpkm_expression_log2.csv");
#Expression - SK Learn StandardScaler
gene_stan = SlicedData$new();
gene_stan$fileDelimiter = ",";
gene_stan$fileOmitCharacters = "NA";
gene_stan$fileSkipRows = 1;
gene_stan$fileSkipColumns = 1;
gene_stan$fileSliceSize = 2000;
gene_stan$LoadFile("fpkm_expression_INT.csv");
#covariates
cvrt_applied = SlicedData$new();
cvrt_applied$fileDelimiter = ",";
cvrt_applied$fileOmitCharacters = "NA";
cvrt_applied$fileSkipRows = 1;
cvrt_applied$fileSkipColumns = 1;
if(length(covariates_applied)>0) {
cvrt_applied$LoadFile(covariates_applied);}
#Analysis
#log normalized and covariates data
me_log_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#log normalized and covariates data
me_log_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_log,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#standardized and covariates data
me_stan_cv_qq = Matrix_eQTL_engine(
snps = snps,
gene = gene_stan,
cvrt = cvrt_applied,
output_file_name = output_file_name,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = "qqplot",
min.pv.by.genesnp = TRUE,
noFDRsaveMemory = FALSE
);
unlink(output_file_name)
#analysis
#log normalized data
cat('Analysis done in: ', me_log_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
y = me_log_cv$all$min.pv.gene;
write.csv(y, 'fpkm_log2_pvalues.csv')
#standard noramlized data
cat('Analysis done in: ', me_stan_cv$time.in.sec, ' seconds', '\n');
cat('Detected eQTLs:', '\n');
x = me_stan_cv$all$min.pv.gene;
write.csv(x, 'fpkm_INT_pvalues.csv')
#log normlized data
plot(me_log_cv)
plot(me_log_cv_qq)
#standard normalized data
plot(me_stan_cv)
plot(me_stan_cv_qq)
